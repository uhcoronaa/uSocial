Parameters:
  EnvironmentName:
    Description: Nombre de entorno
    Type: String
    Default: VPC-G12

  VpcCIDR:
    Description: Ip para la VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Ip para la primera subnet publica
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: Ip para la segunda subnet publica
    Type: String
    Default: 10.0.2.0/24

#  PrivateSubnet1CIDR:
#    Description: Ip para la subnet privada
#    Type: String
#    Default: 10.192.20.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

#  PrivateSubnet1:
#    Type: AWS::EC2::Subnet
#    Properties:
#      VpcId: !Ref VPC
#      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
#      CidrBlock: !Ref PrivateSubnet1CIDR
#      MapPublicIpOnLaunch: false
#      Tags:
#        - Key: Name
#          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes 1

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes 2

  DefaultPublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  DefaultPublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2

#  NoIngressSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupName: "no-ingress-sg"
#      GroupDescription: "Security group with no ingress rule"
#      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: Referencia a la VPC creada
    Value: !Ref VPC

  PublicSubnets:
    Description: Lista de subnets publicas
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PublicSubnet1:
    Description: Referencia a la primera subnet publica
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: Referencia a la segunda subnet publica
    Value: !Ref PublicSubnet2

#  NoIngressSecurityGroup:
#    Description: Security group sin regla ingress
#    Value: !Ref NoIngressSecurityGroup